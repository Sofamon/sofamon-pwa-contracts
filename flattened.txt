// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract SofamonWearables is Ownable {
    address public protocolFeeDestination;
    uint256 public protocolFeePercent;
    uint256 public subjectFeePercent;

    event Trade(
        address trader,
        bytes32 subject,
        bool isBuy,
        uint256 wearableAmount,
        uint256 ethAmount,
        uint256 protocolEthAmount,
        uint256 subjectEthAmount,
        uint256 supply
    );

    event WearableCreated(
        address creator,
        string name,
        string template,
        string description,
        string imageURI
    );

    struct Wearable {
        address creator;
        string name;
        string template;
        string imageURI;
    }

    // WearablesSubject => Wearable
    mapping(bytes32 => Wearable) public wearables;

    // Holder => lastCreationTime
    mapping(address => uint256) public lastCreationTime;

    // The cooldown period between creations
    uint256 public cooldown = 1 days;

    // wearablesSubject => (Holder => Balance)
    mapping(bytes32 => mapping(address => uint256)) public wearablesBalance;

    // wearablesSubject => Supply
    mapping(bytes32 => uint256) public wearablesSupply;

    constructor() Ownable() {
        protocolFeePercent = 50000000000000000;
        subjectFeePercent = 50000000000000000;
    }

    function setProtocolFeeDestination(
        address _feeDestination
    ) public onlyOwner {
        protocolFeeDestination = _feeDestination;
    }

    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {
        protocolFeePercent = _feePercent;
    }

    function setSubjectFeePercent(uint256 _feePercent) public onlyOwner {
        subjectFeePercent = _feePercent;
    }

    function createWearable(
        string memory name,
        string memory template,
        string memory description,
        string memory imageURI
    ) public {
        // require(
        //     block.timestamp >= lastCreationTime[msg.sender] + cooldown,
        //     "WAIT_FOR_COOLDOWN"
        // );
        bytes32 wearablesSubject = keccak256(abi.encode(name, imageURI));
        lastCreationTime[msg.sender] = block.timestamp;
        uint256 supply = wearablesSupply[wearablesSubject];
        require(supply == 0, "WEARABLE_ALREADY_CREATED");
        wearables[wearablesSubject] = Wearable(
            msg.sender,
            name,
            template,
            imageURI
        );

        emit WearableCreated(msg.sender, name, template, description, imageURI);
        _buyWearables(wearablesSubject, supply, 1);
    }

    function getPrice(
        uint256 supply,
        uint256 amount
    ) public pure returns (uint256) {
        uint256 sum1 = supply == 0
            ? 0
            : ((supply - 1) * (supply) * (2 * (supply - 1) + 1)) / 6;
        uint256 sum2 = supply == 0 && amount == 1
            ? 0
            : ((supply - 1 + amount) *
                (supply + amount) *
                (2 * (supply - 1 + amount) + 1)) / 6;
        uint256 summation = sum2 - sum1;
        return (summation * 1 ether) / 16000;
    }

    function getBuyPrice(
        bytes32 wearablesSubject,
        uint256 amount
    ) public view returns (uint256) {
        return getPrice(wearablesSupply[wearablesSubject], amount);
    }

    function getSellPrice(
        bytes32 wearablesSubject,
        uint256 amount
    ) public view returns (uint256) {
        return getPrice(wearablesSupply[wearablesSubject] - amount, amount);
    }

    function getBuyPriceAfterFee(
        bytes32 wearablesSubject,
        uint256 amount
    ) public view returns (uint256) {
        uint256 price = getBuyPrice(wearablesSubject, amount);
        uint256 protocolFee = getProtocolFee(price);
        uint256 subjectFee = getSubjectFee(price);
        return price + protocolFee + subjectFee;
    }

    function getSellPriceAfterFee(
        bytes32 wearablesSubject,
        uint256 amount
    ) public view returns (uint256) {
        uint256 price = getSellPrice(wearablesSubject, amount);
        uint256 protocolFee = getProtocolFee(price);
        uint256 subjectFee = getSubjectFee(price);
        return price - protocolFee - subjectFee;
    }

    function getProtocolFee(uint256 price) internal view returns (uint256) {
        return (price * protocolFeePercent) / 1 ether;
    }

    function getSubjectFee(uint256 price) internal view returns (uint256) {
        return (price * subjectFeePercent) / 1 ether;
    }

    function buyWearables(bytes32 wearablesSubject, uint256 amount) public payable {
        uint256 supply = wearablesSupply[wearablesSubject];
        require(supply > 0, "WEARABLE_NOT_CREATED");

        _buyWearables(wearablesSubject, supply, amount);
    }

    function _buyWearables(
        bytes32 wearablesSubject,
        uint256 supply,
        uint256 amount
    ) internal {
        uint256 price = getPrice(supply, amount);
        uint256 protocolFee = getProtocolFee(price);
        uint256 subjectFee = getSubjectFee(price);
        require(
            msg.value >= price + protocolFee + subjectFee,
            "INSUFFICIENT_PAYMENT"
        );
        wearablesBalance[wearablesSubject][msg.sender] =
            wearablesBalance[wearablesSubject][msg.sender] +
            amount;
        wearablesSupply[wearablesSubject] = supply + amount;

        address subjectFeeDestination = wearables[wearablesSubject].creator;

        emit Trade(
            msg.sender,
            wearablesSubject,
            true,
            amount,
            price,
            protocolFee,
            subjectFee,
            supply + amount
        );

        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}("");
        (bool success2, ) = subjectFeeDestination.call{value: subjectFee}("");
        require(success1 && success2, "UNABLE_TO_SEND_FUNDS");
    }

    function sellWearables(bytes32 wearablesSubject, uint256 amount) public payable {
        uint256 supply = wearablesSupply[wearablesSubject];
        require(supply > amount, "CANNOT_SELL_LAST_WEARABLE");

        uint256 price = getPrice(supply - amount, amount);
        uint256 protocolFee = getProtocolFee(price);
        uint256 subjectFee = getSubjectFee(price);
        require(
            wearablesBalance[wearablesSubject][msg.sender] >= amount,
            "INSUFFICIENT_HOLDINGS"
        );

        wearablesBalance[wearablesSubject][msg.sender] =
            wearablesBalance[wearablesSubject][msg.sender] -
            amount;
        wearablesSupply[wearablesSubject] = supply - amount;

        address subjectFeeDestination = wearables[wearablesSubject].creator;

        emit Trade(
            msg.sender,
            wearablesSubject,
            false,
            amount,
            price,
            protocolFee,
            subjectFee,
            supply - amount
        );

        (bool success1, ) = msg.sender.call{
            value: price - protocolFee - subjectFee
        }("");
        (bool success2, ) = protocolFeeDestination.call{value: protocolFee}("");
        (bool success3, ) = subjectFeeDestination.call{value: subjectFee}("");

        require(
            success1 && success2 && success3,
            "UNABLE_TO_SEND_FUNDS"
        );
    }
}
